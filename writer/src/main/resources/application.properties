### Local server
server.port=${SERVER_PORT:8999}

### Compression
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024

# Actuator
management.endpoints.enabled-by-default=false
management.endpoint.health.enabled=true

### Security
security.cors.allowedOrigins=${SECURITY_ALLOWED_ORIGINS:*}

spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_URL:https://auth.opendatahub.testingmachine.eu/auth}/realms/${KEYCLOAK_REALM:noi}
#spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_URL:https://auth.opendatahub.testingmachine.eu/auth}/realms/${KEYCLOAK_REALM:noi}

spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT_ID:odh-mobility-writer-development}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid

# Config for keycloak UMA authorization
authz.keycloak.authServerUrl=${KEYCLOAK_URL:https://auth.opendatahub.testingmachine.eu/auth}
authz.keycloak.realm=${KEYCLOAK_REALM:noi}
authz.keycloak.clientId=${KEYCLOAK_CLIENT_ID:odh-mobility-writer-development}
authz.keycloak.clientSecret=${KEYCLOAK_CLIENT_SECRET:a0c41578-7f31-4b52-8efe-fab8aece34da}

logging.level.org.keycloak=${KEYCLOAK_LOG_LEVEL:WARN}

# Used by security filter as client_id to check roles against
auth.client.id=${KEYCLOAK_CLIENT_ID:odh-mobility-writer-development}

### Database (see persistence.xml for details; .properties values override .xml values)
# The default is set to the docker postgres connection (see docker-compose.yml)
# hibernate.hikari.dataSource.serverName=${POSTGRES_SERVER:localhost}
# hibernate.hikari.dataSource.portNumber=${POSTGRES_PORT:5555}
# hibernate.hikari.dataSource.databaseName=${POSTGRES_DB:bdp}
# hibernate.default_schema=${POSTGRES_SCHEMA:intimev2}
# hibernate.hikari.dataSource.user=${POSTGRES_USERNAME:bdp}
# hibernate.hikari.dataSource.password=${POSTGRES_PASSWORD:password}
# hibernate.hikari.maximumPoolSize=${HIBERNATE_MAX_POOL_SIZE:2}

# FIXME: These values should be used, not hibernate.* (remove also persistence.xml)
# Needed only for flyway for now
spring.datasource.url=jdbc:postgresql://${POSTGRES_SERVER:localhost}:${POSTGRES_PORT:5555}/${POSTGRES_DB:bdp}?currentSchema=${POSTGRES_SCHEMA:intimev2},public
spring.datasource.username=${POSTGRES_USERNAME:bdp}
spring.datasource.password=${POSTGRES_PASSWORD:password}
spring.datasource.hikari.maximum-pool-size=${HIBERNATE_MAX_POOL_SIZE:2}
spring.datasource.hikari.leakDetectionThreshold=${HIKARI_LEAK_DETECTION_THRESHOLD:0}
spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.naming.implicit-strategy=com.opendatahub.timeseries.bdp.writer.dal.util.SchemaGeneratorImplicitNamingStrategy
spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.properties.hibernate.dialect=com.opendatahub.timeseries.bdp.writer.dal.util.PostgisJsonDialect

# Database migrations
spring.flyway.enabled=true
spring.flyway.placeholders.default_schema=${POSTGRES_SCHEMA:intimev2}
spring.flyway.defaultSchema=${POSTGRES_SCHEMA:intimev2}

### Database ORM logging
# Enable SQL output while logging
hibernate.show_sql=${HIBERNATE_SQL_LOG:false}
# Enable logging for hibernate
logging.level.org.hibernate.SQL=${HIBERNATE_LOG_LEVEL:WARNING}
# Enable logging for HikariCP to verify that it is used
logging.level.com.zaxxer.hikari.HikariConfig=${HIBERNATE_LOG_LEVEL:WARNING}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${HIBERNATE_LOG_LEVEL:WARNING}

# Solving issue: Disabling contextual LOB creation as createClob() method threw error
hibernate.temp.use_jdbc_metadata_defaults=false
hibernate.types.print.banner = false
